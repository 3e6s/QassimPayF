// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QassimPay.Data;

#nullable disable

namespace QassimPay.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241206224621_AddCurrencyExchangedotnet1")]
    partial class AddCurrencyExchangedotnet1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QassimPay.Models.AddressModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Postal_Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street_Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("U_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("U_ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("QassimPay.Models.BillingModel", b =>
                {
                    b.Property<int>("Billing_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Billing_ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Billing_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("W_ID")
                        .HasColumnType("integer");

                    b.HasKey("Billing_ID");

                    b.HasIndex("W_ID");

                    b.ToTable("Billing");
                });

            modelBuilder.Entity("QassimPay.Models.CurrencyExchangeModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CurrencyFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.ToTable("CurrencyExchange");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CurrencyFrom = "USD",
                            CurrencyTo = "SAR",
                            ExchangeRate = 3.75m
                        },
                        new
                        {
                            ID = 2,
                            CurrencyFrom = "SAR",
                            CurrencyTo = "USD",
                            ExchangeRate = 0.27m
                        },
                        new
                        {
                            ID = 3,
                            CurrencyFrom = "USD",
                            CurrencyTo = "AED",
                            ExchangeRate = 3.67m
                        },
                        new
                        {
                            ID = 4,
                            CurrencyFrom = "AED",
                            CurrencyTo = "USD",
                            ExchangeRate = 0.27m
                        },
                        new
                        {
                            ID = 5,
                            CurrencyFrom = "USD",
                            CurrencyTo = "EGP",
                            ExchangeRate = 30.96m
                        },
                        new
                        {
                            ID = 6,
                            CurrencyFrom = "EGP",
                            CurrencyTo = "USD",
                            ExchangeRate = 0.032m
                        },
                        new
                        {
                            ID = 7,
                            CurrencyFrom = "USD",
                            CurrencyTo = "QAR",
                            ExchangeRate = 3.64m
                        },
                        new
                        {
                            ID = 8,
                            CurrencyFrom = "QAR",
                            CurrencyTo = "USD",
                            ExchangeRate = 0.27m
                        },
                        new
                        {
                            ID = 9,
                            CurrencyFrom = "USD",
                            CurrencyTo = "KWD",
                            ExchangeRate = 0.31m
                        },
                        new
                        {
                            ID = 10,
                            CurrencyFrom = "KWD",
                            CurrencyTo = "USD",
                            ExchangeRate = 3.24m
                        });
                });

            modelBuilder.Entity("QassimPay.Models.TransferModel", b =>
                {
                    b.Property<int>("Receipt_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Receipt_ID"));

                    b.Property<decimal>("AmountM")
                        .HasColumnType("numeric");

                    b.Property<int>("Reciver")
                        .HasColumnType("integer");

                    b.Property<int>("Sender_ID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("T_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Receipt_ID");

                    b.HasIndex("Sender_ID");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("QassimPay.Models.UserModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<decimal>("Monthly_income")
                        .HasColumnType("numeric")
                        .HasColumnName("monthly_income");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("ID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("QassimPay.Models.WalletModel", b =>
                {
                    b.Property<int>("Wallet_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Wallet_ID"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("User_ID")
                        .HasColumnType("integer");

                    b.HasKey("Wallet_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("QassimPay.Models.AddressModel", b =>
                {
                    b.HasOne("QassimPay.Models.UserModel", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("U_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QassimPay.Models.BillingModel", b =>
                {
                    b.HasOne("QassimPay.Models.WalletModel", "Wallet")
                        .WithMany("Billings")
                        .HasForeignKey("W_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("QassimPay.Models.TransferModel", b =>
                {
                    b.HasOne("QassimPay.Models.WalletModel", "Wallet")
                        .WithMany("Transfers")
                        .HasForeignKey("Sender_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("QassimPay.Models.WalletModel", b =>
                {
                    b.HasOne("QassimPay.Models.UserModel", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QassimPay.Models.UserModel", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("QassimPay.Models.WalletModel", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("Transfers");
                });
#pragma warning restore 612, 618
        }
    }
}
